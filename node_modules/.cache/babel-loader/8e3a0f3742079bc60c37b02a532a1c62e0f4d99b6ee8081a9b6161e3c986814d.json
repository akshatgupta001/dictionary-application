{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://c9f7b82a-b412-4ec3-ac6d-a18f0709a49d.mock.pstmn.io'; // Replace with actual backend URL\n\n// Function to handle errors\nconst handleError = error => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    console.error('Error Response:', error.response.data);\n    console.error('Status Code:', error.response.status);\n    console.error('Headers:', error.response.headers);\n    return {\n      error: true,\n      message: 'An error occurred while fetching data.',\n      status: error.response.status\n    };\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('Error Request:', error.request);\n    return {\n      error: true,\n      message: 'No response received from the server. Please try again later.'\n    };\n  } else {\n    // Something happened in setting up the request\n    console.error('Error Message:', error.message);\n    return {\n      error: true,\n      message: 'An unexpected error occurred.'\n    };\n  }\n};\n\n// Fetch all words\nexport const fetchWords = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/words`);\n    if (response.data && Array.isArray(response.data)) {\n      return {\n        error: false,\n        data: response.data\n      };\n    } else {\n      return {\n        error: true,\n        message: 'Invalid response format'\n      };\n    }\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Fetch details of a word\nexport const fetchWordDetails = async word => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/words/${word}`);\n    return {\n      error: false,\n      data: response.data\n    };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Add a new word\nexport const addWord = async wordData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/words`, wordData);\n    return {\n      error: false,\n      data: response.data\n    };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Update a word's tags or description\nexport const updateWord = async (word, updatedData) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/words/${word}`, updatedData);\n    return {\n      error: false,\n      data: response.data\n    };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Fetch top N searched words\nexport const fetchTopSearches = async n => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/top-searches`);\n    return {\n      error: false,\n      data: response.data\n    };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Search words by tags\nexport const searchWordsByTags = async tags => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/words/search`, {\n      params: {\n        tags\n      }\n    });\n    return {\n      error: false,\n      data: response.data\n    };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Fetch all tags\nexport const fetchTags = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/tags`);\n    return {\n      error: false,\n      data: response.data\n    };\n  } catch (error) {\n    return handleError(error);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","handleError","error","response","console","data","status","headers","message","request","fetchWords","get","Array","isArray","fetchWordDetails","word","addWord","wordData","post","updateWord","updatedData","put","fetchTopSearches","n","searchWordsByTags","tags","params","fetchTags"],"sources":["/Users/akshatgupta/web/corpo-lingo/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://c9f7b82a-b412-4ec3-ac6d-a18f0709a49d.mock.pstmn.io'; // Replace with actual backend URL\n\n// Function to handle errors\nconst handleError = (error) => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    console.error('Error Response:', error.response.data);\n    console.error('Status Code:', error.response.status);\n    console.error('Headers:', error.response.headers);\n    return { error: true, message: 'An error occurred while fetching data.', status: error.response.status };\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('Error Request:', error.request);\n    return { error: true, message: 'No response received from the server. Please try again later.' };\n  } else {\n    // Something happened in setting up the request\n    console.error('Error Message:', error.message);\n    return { error: true, message: 'An unexpected error occurred.' };\n  }\n};\n\n// Fetch all words\nexport const fetchWords = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/words`);\n      if (response.data && Array.isArray(response.data)) {\n        return { error: false, data: response.data };\n      } else {\n        return { error: true, message: 'Invalid response format' };\n      }\n    } catch (error) {\n      return handleError(error);\n    }\n  };\n  \n\n// Fetch details of a word\nexport const fetchWordDetails = async (word) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/words/${word}`);\n    return { error: false, data: response.data };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Add a new word\nexport const addWord = async (wordData) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/words`, wordData);\n    return { error: false, data: response.data };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Update a word's tags or description\nexport const updateWord = async (word, updatedData) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/words/${word}`, updatedData);\n    return { error: false, data: response.data };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Fetch top N searched words\nexport const fetchTopSearches = async (n) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/top-searches`);\n    return { error: false, data: response.data };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Search words by tags\nexport const searchWordsByTags = async (tags) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/words/search`, { params: { tags } });\n    return { error: false, data: response.data };\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n// Fetch all tags\n    export const fetchTags = async () => {\n    try {\n    const response = await axios.get(`${API_BASE_URL}/tags`);\n    return { error: false, data: response.data };\n    } catch (error) {\n    return handleError(error);\n    }\n    };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}