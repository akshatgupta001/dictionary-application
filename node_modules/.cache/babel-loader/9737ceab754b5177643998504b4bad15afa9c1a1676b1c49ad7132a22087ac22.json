{"ast":null,"code":"// mocks/browser.js\nimport { setupWorker, rest } from 'msw';\n\n// Define mock handlers\nexport const worker = setupWorker(\n// Intercept GET request to fetch all words\nrest.get('http://localhost:5002/words', (req, res, ctx) => {\n  return res(ctx.json([{\n    word: 'API',\n    fullForm: 'Application Programming Interface',\n    description: 'A set of functions and protocols for building software.'\n  }, {\n    word: 'HTML',\n    fullForm: 'Hypertext Markup Language',\n    description: 'The standard language for creating web pages.'\n  }]));\n}),\n// Intercept GET request to fetch details of a specific word\nrest.get('http://localhost:5002/words/:word', (req, res, ctx) => {\n  const {\n    word\n  } = req.params;\n  return res(ctx.json({\n    word,\n    fullForm: `Full Form of ${word}`,\n    description: `Description of ${word}`\n  }));\n}),\n// Intercept POST request to add a new word\nrest.post('http://localhost:5002/words', (req, res, ctx) => {\n  const {\n    word,\n    fullForm,\n    description\n  } = req.body;\n  return res(ctx.status(201), ctx.json({\n    message: 'Word added successfully!',\n    word,\n    fullForm,\n    description\n  }));\n}),\n// Intercept PUT request to update a word's details\nrest.put('http://localhost:5002/words/:word', (req, res, ctx) => {\n  const {\n    word\n  } = req.params;\n  const {\n    description,\n    tags\n  } = req.body;\n  return res(ctx.json({\n    message: `Word ${word} updated successfully!`,\n    description,\n    tags\n  }));\n}),\n// Intercept GET request to fetch top N searched words\nrest.get('http://localhost:5002/words/top/:n', (req, res, ctx) => {\n  const {\n    n\n  } = req.params;\n  const topWords = Array.from({\n    length: n\n  }, (_, i) => ({\n    word: `Word ${i + 1}`,\n    description: `Description for word ${i + 1}`\n  }));\n  return res(ctx.json(topWords));\n}),\n// Intercept GET request to fetch tags\nrest.get('http://localhost:5002/tags', (req, res, ctx) => {\n  return res(ctx.json([{\n    name: 'technology'\n  }, {\n    name: 'software'\n  }, {\n    name: 'web'\n  }, {\n    name: 'markup'\n  }]));\n}));","map":{"version":3,"names":["setupWorker","rest","worker","get","req","res","ctx","json","word","fullForm","description","params","post","body","status","message","put","tags","n","topWords","Array","from","length","_","i","name"],"sources":["/Users/akshatgupta/web/corpo-lingo/src/mocks/browser.js"],"sourcesContent":["// mocks/browser.js\nimport { setupWorker, rest } from 'msw';\n\n// Define mock handlers\nexport const worker = setupWorker(\n  // Intercept GET request to fetch all words\n  rest.get('http://localhost:5002/words', (req, res, ctx) => {\n    return res(\n      ctx.json([\n        { word: 'API', fullForm: 'Application Programming Interface', description: 'A set of functions and protocols for building software.' },\n        { word: 'HTML', fullForm: 'Hypertext Markup Language', description: 'The standard language for creating web pages.' }\n      ])\n    );\n  }),\n\n  // Intercept GET request to fetch details of a specific word\n  rest.get('http://localhost:5002/words/:word', (req, res, ctx) => {\n    const { word } = req.params;\n    return res(\n      ctx.json({\n        word,\n        fullForm: `Full Form of ${word}`,\n        description: `Description of ${word}`\n      })\n    );\n  }),\n\n  // Intercept POST request to add a new word\n  rest.post('http://localhost:5002/words', (req, res, ctx) => {\n    const { word, fullForm, description } = req.body;\n    return res(\n      ctx.status(201),\n      ctx.json({ message: 'Word added successfully!', word, fullForm, description })\n    );\n  }),\n\n  // Intercept PUT request to update a word's details\n  rest.put('http://localhost:5002/words/:word', (req, res, ctx) => {\n    const { word } = req.params;\n    const { description, tags } = req.body;\n    return res(\n      ctx.json({ message: `Word ${word} updated successfully!`, description, tags })\n    );\n  }),\n\n  // Intercept GET request to fetch top N searched words\n  rest.get('http://localhost:5002/words/top/:n', (req, res, ctx) => {\n    const { n } = req.params;\n    const topWords = Array.from({ length: n }, (_, i) => ({\n      word: `Word ${i + 1}`,\n      description: `Description for word ${i + 1}`\n    }));\n    return res(ctx.json(topWords));\n  }),\n\n  // Intercept GET request to fetch tags\n  rest.get('http://localhost:5002/tags', (req, res, ctx) => {\n    return res(\n      ctx.json([\n        { name: 'technology' },\n        { name: 'software' },\n        { name: 'web' },\n        { name: 'markup' }\n      ])\n    );\n  })\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}