{"ast":null,"code":"var _jsxFileName = \"/Users/akshatgupta/web/corpo-lingo/src/components/WordList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchWords } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordList = () => {\n  _s();\n  const [words, setWords] = useState([]); // Initialize as empty array\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const getWords = async () => {\n      const result = await fetchWords();\n      if (result.message) {\n        setError(result.message); // Handle error message\n      } else {\n        setWords(result); // Set the words only if there's no error\n      }\n    };\n    getWords();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Word List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Array.isArray(words) ? words.map(word => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [word.word, \" - \", word.fullForm]\n      }, word.word, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No words available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(WordList, \"w6F9vAwwL4jx389WpfF3DEf8Yb0=\");\n_c = WordList;\nexport default WordList;\nvar _c;\n$RefreshReg$(_c, \"WordList\");","map":{"version":3,"names":["React","useEffect","useState","fetchWords","jsxDEV","_jsxDEV","WordList","_s","words","setWords","error","setError","getWords","result","message","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","Array","isArray","map","word","fullForm","_c","$RefreshReg$"],"sources":["/Users/akshatgupta/web/corpo-lingo/src/components/WordList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { fetchWords } from './api';\n\nconst WordList = () => {\n  const [words, setWords] = useState([]); // Initialize as empty array\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getWords = async () => {\n      const result = await fetchWords();\n      if (result.message) {\n        setError(result.message); // Handle error message\n      } else {\n        setWords(result); // Set the words only if there's no error\n      }\n    };\n\n    getWords();\n  }, []);\n\n  return (\n    <div>\n      <h2>Word List</h2>\n      {error && <p style={{ color: 'red' }}>{error}</p>} {/* Display error message */}\n      <ul>\n        {Array.isArray(words) ? (\n          words.map((word) => (\n            <li key={word.word}>{word.word} - {word.fullForm}</li>\n          ))\n        ) : (\n          <p>No words available.</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default WordList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,MAAM,GAAG,MAAMV,UAAU,CAAC,CAAC;MACjC,IAAIU,MAAM,CAACC,OAAO,EAAE;QAClBH,QAAQ,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;MAC5B,CAAC,MAAM;QACLL,QAAQ,CAACI,MAAM,CAAC,CAAC,CAAC;MACpB;IACF,CAAC;IAEDD,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjBT,KAAK,iBAAIL,OAAA;MAAGe,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,EAAEL;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAC,eACnDd,OAAA;MAAAU,QAAA,EACGO,KAAK,CAACC,OAAO,CAACf,KAAK,CAAC,GACnBA,KAAK,CAACgB,GAAG,CAAEC,IAAI,iBACbpB,OAAA;QAAAU,QAAA,GAAqBU,IAAI,CAACA,IAAI,EAAC,KAAG,EAACA,IAAI,CAACC,QAAQ;MAAA,GAAvCD,IAAI,CAACA,IAAI;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmC,CACtD,CAAC,gBAEFd,OAAA;QAAAU,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC1B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACZ,EAAA,CAhCID,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAkCd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}